{"version":3,"sources":["api/Api.js","components/Transaccion/Transaccion.jsx","components/LoadingIndicator/LoadingIndicator.jsx","components/Inicio/Inicio.jsx","components/Login/Login.jsx","App.js","serviceWorker.js","index.js"],"names":["login","email","password","fetch","method","headers","body","JSON","stringify","then","res","json","catch","r","traerTransacciones","token","startDate","endDate","Transaccion","modalRef","React","createRef","handleClickOutside","event","current","contains","target","props","handleCerrarDialogo","document","addEventListener","this","removeEventListener","transaccion","_id","createdDate","type","value","points","className","ref","slice","Component","LoadingIndicator","color","Inicio","state","transacciones","transaccionActual","fechaInicio","Date","toJSON","fechaFin","earn","redeem","min","max","cargando","error","setState","handleChange","e","name","renderTransacciones","transaccionesFiltradas","filter","requisitos","length","colSpan","map","key","onClick","onBuscarClicked","code","data","handleOnChangeToken","onChange","checked","step","maxValue","minValue","Table","variant","responsive","striped","bordered","hover","size","to","Login","onSubmit","preventDefault","message","estado","placeholder","required","App","nuevoToken","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.9c5812df.chunk.js","sourcesContent":["/** \r\n * Funcion encargada de hacer la peticion POST al servidor para obtener el token de autorizacion\r\n * que permite acceder a los datos del usuario\r\n */\r\nexport const login = (email, password) => {\r\n    return fetch(\"https://pruebatecnica.puntosleal.com/api/user/login\", {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n            email,\r\n            password\r\n        })\r\n    })\r\n    .then( res => res.json())\r\n    .catch( r => r )\r\n}\r\n\r\n/** \r\n * Funcion encargada de traer las transacciones del usuario filtradas por un periodo de tiempo determinado\r\n */\r\nexport const traerTransacciones = (token, startDate, endDate) => {\r\n    return fetch(`https://pruebatecnica.puntosleal.com/api/user/my/transactions?startDate=${startDate}&endDate=${endDate}`, {\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${token}`\r\n        }\r\n    })\r\n    .then( res => res.json())\r\n    .catch( res => res )\r\n}","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport './transaccion.sass'\r\n\r\n/**\r\n * Dialogo que muestra el detalle de la transaccion seleccionada\r\n */\r\nclass Transaccion extends Component {\r\n    \r\n    /** Referencia al dialogo */\r\n    modalRef = React.createRef();\r\n\r\n    /** Se establece un escuchador para el evento mousedown */\r\n    componentDidMount() {\r\n        document.addEventListener('mousedown', this.handleClickOutside);\r\n    }\r\n\r\n    /** Se quita el escuchador para el evento mousedown cuando el componente se desmonta*/\r\n    componentWillUnmount() {\r\n        document.removeEventListener('mousedown', this.handleClickOutside);\r\n    }\r\n\r\n    /**\r\n     * Revisa si se da click por fuera del dialogo para que se cierre\r\n     * @public \r\n     */\r\n    handleClickOutside = (event) => {\r\n        if (this.modalRef && !this.modalRef.current.contains(event.target)) {\r\n            this.props.handleCerrarDialogo()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let { _id, createdDate, type, value, points } = this.props.transaccion\r\n    \r\n        return (\r\n            <div className='fondo-modal-transaccion'>\r\n                <div className='modal-transaccion' ref={this.modalRef}>\r\n                    <h3>Transacci√≥n</h3>\r\n                    <div className='datos-transaccion'>\r\n                        <div className='campo-detalle-transaccion'>\r\n                            <b>ID</b>\r\n                            <span>{_id}</span>\r\n                        </div>\r\n                        <div className='campo-detalle-transaccion'>\r\n                            <b>Fecha</b>\r\n                            <span>{createdDate.slice(0,10)}</span>\r\n                        </div>\r\n                        <div className='campo-detalle-transaccion'>\r\n                            <b>Valor</b>\r\n                            <span>{value}</span>\r\n                        </div>\r\n                        <div className='campo-detalle-transaccion'>\r\n                            <b>Puntos</b>\r\n                            <span>{points}</span>\r\n                        </div>\r\n                        <div className='campo-detalle-transaccion campo-tipo'>\r\n                            <b>Tipo</b>\r\n                            <span>{type}</span>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nTransaccion.propTypes = {\r\n    /** Informacion obtenida de la transaccion de interes */\r\n    transaccion: PropTypes.shape({\r\n        /** ID de la transaccion */\r\n        _id: PropTypes.string.isRequired,\r\n        /** Fecha de creacion de la transaccion */\r\n        createdDate: PropTypes.string.isRequired,\r\n        /** Tipo de transaccion */\r\n        type: PropTypes.string.isRequired,\r\n        /** Valor de la transaccion */\r\n        value: PropTypes.number.isRequired,\r\n        /** Puntos de la transaccion */\r\n        points: PropTypes.number.isRequired\r\n    })\r\n}\r\n\r\nexport default Transaccion\r\n","import React, { Component } from 'react'\r\nimport './loading-indicator.sass'\r\nimport DotLoader from \"react-spinners/DotLoader\"\r\n\r\n\r\n/**\r\n * Componente encargado de mostrar al usuario que se esta realizando alguna tarea de carga.\r\n */\r\nconst LoadingIndicator = () => {\r\n    return (\r\n        <div className='fondo-indicador-carga'>\r\n            <DotLoader\r\n                color=\"#ECC400\"/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LoadingIndicator\r\n","import React, { Component } from 'react'\r\nimport { Redirect } from 'react-router-dom'\r\nimport { traerTransacciones } from '../../api/Api'\r\nimport Transaccion from './../Transaccion/Transaccion'\r\nimport InputRange from 'react-input-range'\r\nimport 'react-input-range/lib/css/index.css'\r\nimport './inicio.sass'\r\nimport LoadingIndicator from '../LoadingIndicator/LoadingIndicator'\r\nimport Table from 'react-bootstrap/Table'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport PropTypes from 'prop-types'\r\n\r\n/**\r\n * P√°gina principal en la que se muestran las transacciones del usuario y se le da la posibilidad de filtrarlas.\r\n */\r\nclass Inicio extends Component {\r\n\r\n    /** Inicializaci√≥n del estado del componente */\r\n    state = {\r\n        transacciones: [],\r\n        transaccionActual: null,\r\n        fechaInicio: new Date(\"2018-11-01\").toJSON().slice(0,10),\r\n        fechaFin: new Date(\"2018-11-15\").toJSON().slice(0,10),\r\n        earn: true,\r\n        redeem: true,\r\n        value: {min: 0, max: 50000},\r\n        points: {min: 0, max: 50},\r\n        cargando: false,\r\n        error: \"\"\r\n    }\r\n\r\n    /**\r\n     * Solicita la informacion de las transacciones del usuario\r\n    */\r\n    componentDidMount() {\r\n        let { token } = this.props\r\n        let { fechaInicio, fechaFin } = this.state\r\n        /** Se indica que se esta cargando la respuesta del servidor */\r\n        this.setState({\r\n            cargando: true\r\n        })\r\n        /** Se revisa primero si se tiene el token obtenido en el login para hacer la solicitud */\r\n        if( token )\r\n            /** \r\n             * En caso de que la solicitud de las transacciones al servidor sea exitosa se \r\n             * guardan las transacciones en el estado del componente\r\n            */\r\n            traerTransacciones( token, fechaInicio, fechaFin )\r\n            .then( res => {\r\n                if(res.code === 100)\r\n                    this.setState({\r\n                        transacciones: res.data,\r\n                        cargando: false\r\n                    })\r\n                else if(res.code === 120) {\r\n                    this.props.handleOnChangeToken(null)\r\n                    this.setState({\r\n                        cargando: false\r\n                    })\r\n                }\r\n                else {\r\n                    this.props.handleOnChangeToken(null)\r\n                    this.setState({\r\n                        cargando: false\r\n                    })\r\n                }\r\n            })\r\n    }\r\n\r\n    /**\r\n     * Funcion encargada de cerrar el dialogo que muestra el detalle de la transaccion\r\n     * @public\r\n     */\r\n    handleCerrarDialogo = () => this.setState({transaccionActual: null})\r\n\r\n    \r\n    /**\r\n     * Funcion encargada de escuhar los cambios en los campos de texto y hacer los ajustes correspondientes en el estado\r\n     * @public\r\n     */\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n\r\n    \r\n    /**\r\n     * Funcion encargada de aplicar los filtros correspondientes a las transacciones y renderizar las filas de la tabla\r\n     * @public\r\n     */\r\n    renderTransacciones = () => {\r\n        let { transacciones, earn, redeem, value, points } = this.state\r\n\r\n        /** Filtro de las transacciones */\r\n        let transaccionesFiltradas = transacciones.filter( transaccion => {\r\n            /** Filtro por tipo */\r\n            let requisitos = (transaccion.type === \"earn\" && earn) || (transaccion.type === \"redeem\" && redeem)\r\n            /** Filtro por valor */\r\n            requisitos &= (value.min <= transaccion.value) && (transaccion.value <= value.max)\r\n            /** Filtro por puntos */\r\n            requisitos &= (points.min <= transaccion.points) && (transaccion.points <= points.max)\r\n            return requisitos\r\n        })\r\n\r\n        /** Respuesta en caso de que despues del filtro no queden transacciones */\r\n        if(transaccionesFiltradas.length === 0)\r\n            return <tr>\r\n                <td colSpan=\"4\">No hay transacciones</td>\r\n            </tr>\r\n        \r\n        /** Renderizacion de las transacciones resultantes */\r\n        return transaccionesFiltradas.map( transaccion => \r\n            <tr key={transaccion._id}>\r\n                <td>{transaccion._id}</td>\r\n                <td>{transaccion.createdDate.slice(0,10)}</td>\r\n                <td>{transaccion.type}</td>\r\n                <td className='ver-detalle' onClick={ () => {\r\n                    this.setState({\r\n                        transaccionActual: transaccion\r\n                    })\r\n                }}>Ver</td>\r\n            </tr>\r\n        )\r\n    }\r\n\r\n    \r\n    /**\r\n     * Funcion encargada de buscar transacciones del usuario en un periodo de tiempo en especifico\r\n     * @public\r\n     */\r\n    onBuscarClicked = () => {\r\n        let { token } = this.props\r\n        let { fechaInicio, fechaFin } = this.state\r\n        this.setState({\r\n            cargando: true\r\n        })\r\n        /** \r\n        * En caso de que la solicitud de las transacciones al servidor sea exitosa se \r\n        * guardan las transacciones en el estado del componente\r\n        * Si ocurre un error o el token no es valido, se devuelve al usuario al login\r\n        */\r\n        traerTransacciones( token, fechaInicio, fechaFin )\r\n        .then( res => {\r\n                if(res.code === 100)\r\n                    this.setState({\r\n                        transacciones: res.data,\r\n                        cargando: false\r\n                    })\r\n                else if(res.code === 120) {\r\n                    this.props.handleOnChangeToken(null)\r\n                    this.setState({\r\n                        cargando: false\r\n                    })\r\n                }\r\n                else {\r\n                    this.props.handleOnChangeToken(null)\r\n                    this.setState({\r\n                        cargando: false\r\n                    })\r\n                }\r\n        })\r\n    }\r\n    \r\n    render() {\r\n        let { transaccionActual, fechaInicio, fechaFin, earn, redeem, value, points, cargando } = this.state\r\n        let { token } = this.props\r\n\r\n        if(!token)\r\n            return <Redirect to=\"/\"/>\r\n\r\n        return (\r\n            <div className='pagina-transacciones'>\r\n                <div className='contenido-transacciones'>\r\n                    <div className='barra-filtros'>\r\n                        <h1 className='titulo-transacciones'>Transacciones</h1>\r\n                        <div className='fecha-inputs'>\r\n                            <b>Inicio</b>\r\n                            <input type=\"date\" name='fechaInicio' value={fechaInicio} onChange={this.handleChange} max={fechaFin}/>\r\n                            <b>Fin</b>\r\n                            <input type=\"date\" name='fechaFin' value={fechaFin} onChange={this.handleChange} min={fechaInicio}/>\r\n                        </div>\r\n                        <button className='btn-buscar' onClick={this.onBuscarClicked}>Actualizar</button>\r\n                        <div className='titulo-tipo'>\r\n                            Tipo\r\n                        </div>\r\n                        <div className='checkboxes'>\r\n                            <div className='checkbox-type'>\r\n                                <input type=\"checkbox\" name=\"earn\" checked={earn} onChange={() => this.setState({earn: !this.state.earn})}/>\r\n                                earn\r\n                            </div>\r\n                            <div className='checkbox-type'>\r\n                                <input type=\"checkbox\" name=\"redeem\" checked={redeem} onChange={() => this.setState({redeem: !this.state.redeem})}/>\r\n                                redeem\r\n                            </div>\r\n                        </div>\r\n                        <div className='contenedor-rango-valor'>\r\n                            <b>Rango de valor</b>\r\n                            <InputRange\r\n                                step={1000}\r\n                                maxValue={50000}\r\n                                minValue={0}\r\n                                value={value}\r\n                                onChange={value => this.setState({ value })}/>\r\n                        </div>\r\n                        <div className='contenedor-rango-valor'>\r\n                            <b>Rango de puntos</b>\r\n                            <InputRange\r\n                                step={5}\r\n                                maxValue={50}\r\n                                minValue={0}\r\n                                value={points}\r\n                                onChange={points => this.setState({ points })}/>\r\n                        </div>\r\n                    </div>                    \r\n                    <div className='contenedor-transacciones'>\r\n                        <h1>Tabla de transacciones</h1>\r\n                        <Table\r\n                            variant=\"dark\"\r\n                            className='tabla' \r\n                            responsive striped bordered hover size=\"sm\" >\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>#</th>\r\n                                    <th>Fecha</th>\r\n                                    <th>Tipo</th>\r\n                                    <th>Detalle</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {\r\n                                    this.renderTransacciones()\r\n                                }\r\n                            </tbody>\r\n                        </Table>\r\n                    </div>\r\n                    {\r\n                        transaccionActual &&\r\n                        <Transaccion transaccion={transaccionActual} handleCerrarDialogo={this.handleCerrarDialogo}/>\r\n                    }\r\n                    {\r\n                        cargando &&\r\n                        <LoadingIndicator/>\r\n                    }\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nInicio.propTypes = {\r\n    /** Token de acceso obtenido del servidor una vez se realizo el login */\r\n    token: PropTypes.string,\r\n}\r\n\r\nexport default Inicio\r\n","import React, { Component } from 'react'\r\nimport './login.sass'\r\nimport { login } from '../../api/Api'\r\nimport { Redirect } from 'react-router-dom'\r\nimport LoadingIndicator from '../LoadingIndicator/LoadingIndicator'\r\nimport PropTypes from 'prop-types'\r\n\r\n/**\r\n * P√°gina de login del usuario.\r\n */\r\nclass Login extends Component {\r\n\r\n    /** Inicializaci√≥n del estado del componente */\r\n    state = {\r\n        email: \"\",\r\n        password: \"\",\r\n        error: \"\",\r\n        cargando: false\r\n    }\r\n\r\n    /**\r\n     * Funcion encargada de escuhar los cambios en los campos de texto y hacer los ajustes correspondientes en el estado\r\n     * @public\r\n     */\r\n    onChange = (e) => {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Funcion encargada de enviar las credenciales al servidor y manejar la respuesta para decidir lo que se le muestra al usuario\r\n     * @public\r\n     */\r\n    onSubmit = (e) => {\r\n        e.preventDefault()\r\n        let { email, password } = this.state\r\n        /** Se indica que se esta cargando la respuesta del servidor */\r\n        this.setState({ cargando: true, error: \"\" })\r\n        /** Se hace un llamado a la funci√≥n auxiliar que se contacta con el servidor */\r\n        login( email, password )\r\n        .then( res => {\r\n            /** Se indica que ya se obtuvo la respuesta del servidor*/\r\n            this.setState({ cargando: false})\r\n            /** \r\n             * En caso de que la solicitud de login al servidor sea exitosa se cambia el estado del componente\r\n             *  Si existe un error, se le comunica al usuario\r\n            */\r\n            if(res.code === 100) \r\n                this.props.handleOnChangeToken(res.token)\r\n            else if(res.code === 101 || res.code === 102 || res.code === 130) \r\n                this.setState({\r\n                    error: res.message\r\n                })\r\n            else {\r\n                this.setState({\r\n                    error: \"Ocurrio un error en el inicio de sesi√≥n, por favor intente m√°s tarde\"\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n    render() {\r\n        let { cargando, error, estado } = this.state\r\n        let { token } = this.props\r\n        /** En caso de que la solicitud de login es exitosa se redirige al usuario a la pagina de inicio */\r\n        if( token )\r\n            return <Redirect to=\"/inicio\"/>\r\n\r\n        return (\r\n            <div className='contenedor-login'>\r\n                <form className='dialogo-login' onSubmit={this.onSubmit}>\r\n                    <h2>Iniciar sesi√≥n</h2>\r\n                    <div className='campos-login'>\r\n                        <div>Correo electr√≥nico</div>\r\n                        <input placeholder='Correo Electr√≥nico' name=\"email\" type=\"text\" required onChange={this.onChange}/>\r\n                        <div>Contrase√±a</div>\r\n                        <input placeholder='Contrase√±a' name=\"password\"type=\"password\" required onChange={this.onChange}/>\r\n                    </div>\r\n                    {\r\n                        error && \r\n                        <div className='error'>{error}</div>\r\n                    }\r\n                    <button type=\"submit\">Iniciar</button>\r\n                </form>\r\n                {\r\n                    cargando &&\r\n                    <LoadingIndicator/>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nLogin.propTypes = {\r\n    /** Funcion que facilita el manejo del estado de la aplicaci√≥n una vez se obtiene el token del servidor */\r\n    handleOnChangeToken: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default Login","import React from 'react';\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport './App.css';\nimport Inicio from './components/Inicio/Inicio';\nimport Login from './components/Login/Login';\n\n/**\n * Contenedor de toda la aplicacion web\n */\nclass App extends React.Component {\n\n  state = {\n    /** Token que permite el acceso a los datos en el servidor */\n    token: null\n  }\n  \n  /** Actualiza el token una vez se recibe respuesta del servidor */\n  handleOnChangeToken = nuevoToken => this.setState( {token: nuevoToken}) \n\n  render() {\n    return (\n      /** De acuerdo a la ruta actual se decide que componente se renderiza */\n      <BrowserRouter>\n        <Route path={[\"/\", \"/login\"]}>\n          <Login token={this.state.token} handleOnChangeToken={this.handleOnChangeToken}/>\n        </Route>\n        <Route path=\"/inicio\">\n          <Inicio token={this.state.token} handleOnChangeToken={this.handleOnChangeToken}/>\n        </Route>\n      </BrowserRouter>\n  \n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}